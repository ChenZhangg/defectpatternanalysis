/**
 * 
 */
package cn.edu.fudan.se.code.change.tree.aggregate;

import java.util.HashSet;

import org.eclipse.jdt.core.dom.ASTNode;

/**
 * @author Lotay
 *
 */
public class AggregateTreeNodeType {
	public static final HashSet<Integer> AGGREATED_TREE_NODE_TYPES = new HashSet<Integer>();
	static {
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ARRAY_CREATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ARRAY_TYPE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ASSERT_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ASSIGNMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.BLOCK);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.BOOLEAN_LITERAL);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.CATCH_CLAUSE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.COMPILATION_UNIT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.CONDITIONAL_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.CONSTRUCTOR_INVOCATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.DO_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ENHANCED_FOR_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ENUM_CONSTANT_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.ENUM_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.EXPRESSION_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.FIELD_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.FOR_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.IF_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.IMPORT_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.INFIX_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.INITIALIZER);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.INSTANCEOF_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.JAVADOC);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.LAMBDA_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.LINE_COMMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.METHOD_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.METHOD_INVOCATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.NAME_QUALIFIED_TYPE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.PACKAGE_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.PARENTHESIZED_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.POSTFIX_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.PREFIX_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.QUALIFIED_NAME);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.QUALIFIED_TYPE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.RETURN_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SINGLE_VARIABLE_DECLARATION);
		AGGREATED_TREE_NODE_TYPES
				.add(ASTNode.SUPER_CONSTRUCTOR_INVOCATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SUPER_FIELD_ACCESS);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SUPER_METHOD_INVOCATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SUPER_METHOD_REFERENCE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SWITCH_CASE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SWITCH_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.SYNCHRONIZED_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.THIS_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.THROW_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.TRY_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.TYPE_DECLARATION);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.TYPE_DECLARATION_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.TYPE_LITERAL);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.TYPE_METHOD_REFERENCE);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.UNION_TYPE);
		AGGREATED_TREE_NODE_TYPES
				.add(ASTNode.VARIABLE_DECLARATION_EXPRESSION);
		AGGREATED_TREE_NODE_TYPES
				.add(ASTNode.VARIABLE_DECLARATION_FRAGMENT);
		AGGREATED_TREE_NODE_TYPES
				.add(ASTNode.VARIABLE_DECLARATION_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.WHILE_STATEMENT);
		AGGREATED_TREE_NODE_TYPES.add(ASTNode.WILDCARD_TYPE);
	}

}
